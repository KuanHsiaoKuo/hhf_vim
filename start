set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set enc=utf8
set fencs=utf8,gbk,gb2312,gb18030
syntax on
" Read file when modified outside Vim
set autoread
" leader键配置
let mapleader="\<Space>"
"统一配色vim为solarized
syntax enable
set background=dark
colorscheme solarized
" 突出显示当前列
"set cursorcolumn
" 突出显示当前行
set cursorline

" 自动缩进
set autoindent
set cindent

"make the tab key match bracket pairs
nnoremap <tab> %
vnoremap <tab> %
" 括号配对情况, 跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=2

"manage my line wrapping settings and also show a colored column at 85 characters
set wrap
set textwidth=79
set formatoptions=qrn1
"set colorcolumn=85

"show invisible characters with the same characters that TextMate uses
set list
set listchars=tab:▸\ ,eol:¬

" (osx)设置快捷键将选中文本块复制至系统剪贴板
nmap <Leader>a ggVG
" (osx)设置快捷键将系统剪贴板内容粘贴至 vim
vnoremap <Leader>y :w !pbcopy<CR><CR>
nmap <Leader>p :r !pbpaste<CR><CR>
" (非osx)设置快捷键将选中文本块复制至系统剪贴板
"vmap <Leader>y "+y
" (非osx)设置快捷键将系统剪贴板内容粘贴至 vim
"nmap <Leader>p "+p
nmap <Leader>w :w!<cr>
nmap <Leader>f :find<cr>
"退出插入模式
inoremap <c-j> <esc>
"strip all trailing whitespace in the current file
"nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
autocmd BufWritePre *.pl %s/\s\+$//e
"显示行数，设置软回车和缩进还有语法
set number
set shiftwidth=4
set autoindent
syntax on

"tab相关设置
set softtabstop=4
" 设置Tab键的宽度        [等同的空格个数]
set tabstop=4
" 每一次缩进对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" 将Tab自动转化成空格[需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set expandtab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround
"一行的字符超出80个的话就把那些字符的背景设为红色
highlight OverLength ctermbg=red ctermfg=white guibg=#592929 
match OverLength /\%81v.\+/

" 设置文内智能搜索提示
" " 高亮search命中的文本
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase


" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
" 代码折叠自定义快捷键 <leader>zz
let g:FoldMethod = 0
map <leader>zz :call ToggleFold()<cr>
fun! ToggleFold()
    if g:FoldMethod == 0
        exe "normal! zM"
        let g:FoldMethod = 1
    else
        exe "normal! zR"
        let g:FoldMethod = 0
    endif
endfun


"Treat long lines as break lines (useful when moving around in them)
""se swap之后，同物理行上线直接跳
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

"最上方显示文件名和路径
let &titlestring = expand("%:p")
if &term == "screen"
  set t_ts=^[k
  set t_fs=^[\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

" 退出后保存折叠状态
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

"----------------------------------------cscope---------------------------------
source ~/.vim/conf/cscope_conf
